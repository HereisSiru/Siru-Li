See more details on: 
https://mimicproject.com/code/050e25bd-6986-5e0a-5eaa-71284dbacfb5


<!DOCTYPE html>

<html lang="en">

  <head>
      <script src = "https://mimicproject.com/libs/maximilian.js"></script>
      <style>
      
  body {
			margin: 0px;
			background-color: #000000;
			overflow: hidden;
		}
/* ðŸ§¸ â€™TALKING LIGHT BY DANCING MORSE CODE'__PROJECT ðŸ’¡
  
   ðŸ¤˜ the sound is made by Morse Code 
   
   -.-.  ---  -..  ..  -.  --.   ..  ...   -  ---  ..-  --.  ....  --..--   -...  ..-  -   --  ..  --  ..   .--  ..  .-..  .-..   -.-  .  .  .--.   -  .-.  -.--  ..  -.  --.  .-.-.-
  
   ðŸ‘€ check  the Meaning in the page bottom

   ðŸ”µ with big credit and thanks to my friend Ryan
   
 */
 
  </style>
     <script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<style>
		body, #container {
			overflow: hidden;
		}
	</style>
</head>
<body>
	<div id="container"></div>
	<script id="vertexShader" type="x-shader/x-vertex">
    		void main() {
	        gl_Position = vec4(position,1.0) ;                
		}
	</script>
	<script id="fragmentShader" type="x-shader/x-fragment">

////This is the precision. This must be set first
        precision mediump float; //set the precision
        
        ////grab the uniform from the management code (in JS)
        ////These uniforms need to be set up in your managemet code
        uniform vec2 resolution; 
        uniform vec2 mouse;
        uniform float time;
        
        ////This i s the main loop
        void main() {
        
        ////Takes width and height, divide it by two, give to the pos vector
        ////Draw in the middle
        vec2 pos = vec2(resolution.x/2.0, resolution.y/2.0);
        
        //vec2 pos = vec2(resolution.x/3.*mouse.x, resolution.y/2.*mouse.y);
        //vec2 pos = resolution.xy/2.0;
		////colour depends on the current fragment positon and the centre of the screen
        ////Geth the distance from the centre to the current fragment, then use it to determine a colour 
        float colour = distance(gl_FragCoord.xy, pos);
        colour *= 0.009; ////This scales the distance field a bit
        
        
        float changingSize = abs(sin(time/1.0))/0.3;
        
        
        ////Colorful background
        //vec4 graidentColor = vec4(abs(sin(time)), 0.0, abs(cos(time)), 1.0)*2.; 
        
        ////White background
        vec4 gradientColor = vec4(abs(sin(time))*0.9, abs(cos(time))*1.4, abs(cos(time)), 1.0)*0.8; 

        vec4 breathingCircle = vec4(vec3(colour), 1.0)*changingSize;
        gl_FragColor = gradientColor*breathingCircle;
        
        //gl_FragColor = breathingCircle;

        
        ////Below is for squared distance
        ////Calculate the difference between the centre of our circle to the current pixel location
        //vec2 pos = gl_FragCoord.xy-resolution/2.;
        
        ////dot product tells the intersection between the two vectors
        ////Calculate the magnitudes
        //float dist_squared = dot(pos, pos)*0.0001;
        
		//gl_FragColor = vec4(vec3(dist_squared), 1.0);
        }


		//============================================================
		//END OF GLSL CODE
		//============================================================
	</script>
    <!-- Our javascript code -->
    <script type="text/javascript">
		//change the resolution here. 1 is highest
		var pixel_resolution = 4.0;
		var container, stats;
		var camera, scene, renderer;
		var uniforms;
        var myWave;
      
          var wave = 10;  
		init();
		animate();
		function init() {
			container = document.getElementById('container');
			camera = new THREE.Camera();
			camera.position.z = 1;
			scene = new THREE.Scene();
			var geometry = new THREE.PlaneBufferGeometry(2,2);
			uniforms = { time: { type: 'f', value: 1.0 }, resolution: { type: 'v2', value: new THREE.Vector2() }, mouse: {type: "v2", value: new THREE.Vector2()}, myWave: { type: 'f', value: 1.0 }};
			var material = new THREE.ShaderMaterial({ uniforms: uniforms, vertexShader: document.getElementById('vertexShader').textContent, fragmentShader: document.getElementById('fragmentShader').textContent });
			var mesh = new THREE.Mesh(geometry, material);
			scene.add(mesh);
			renderer = new THREE.WebGLRenderer();
			//Hack here to change resolution 
			renderer.setPixelRatio(window.devicePixelRatio / pixel_resolution);
			container.appendChild(renderer.domElement);
			onWindowResize();
			window.addEventListener('resize', onWindowResize, false);
	        window.addEventListener('mousemove', onMouseMove, false);
		}
		function onWindowResize(event) {
			renderer.setSize(window.innerWidth, window.innerHeight);
			uniforms.resolution.value.x = renderer.domElement.width;
			uniforms.resolution.value.y = renderer.domElement.height;
		}
      
		function animate() {
			requestAnimationFrame(animate);
			render();
		}
		function onMouseMove( event ) {
        	uniforms.mouse.value.x = 2 * ( event.clientX / window.innerWidth );
 	        uniforms.mouse.value.y = 2 * ( 1-(event.clientY) / window.innerHeight
 	        );
        }
		function render() {
			uniforms.time.value += 0.1;
			renderer.render(scene, camera);
            uniforms.myWave.value = wave;
            //console.log(wave);
		}

        //============================================================
		//END OF THREE JS CODE
		//============================================================
        var wave = 0;
      
        var counter = 0;
		var maxiJs = maximilian();
        var audio = new maxiJs.maxiAudio();      
      	var myOsc1 = new maxiJs.maxiOsc();   

        let morse = new maxiJs.maxiSample();
      
 	    let myClock = new maxiJs.maxiClock();

        audio.init();

        audio.loadSample('morse.wav', morse);  

        audio.play = function() {
          
        myClock.ticker();

        s1 = morse.play()*myOsc1.sinebuf(21)*2.5;

        wave = (s1)*1.3;
            counter++;
return wave;
        };
    </script>
 
  /* ðŸ§¸ the Meaning of Morse Code soundï¼š
  
     ðŸ‘€ 'Coding is tough, but Mimi will keep trying.'
  
      -.-.  ---  -..  ..  -.  --.   ..  ...   -  ---  ..-  --.  ....  --..--   -...  ..-  -   --  ..  --  ..   .--  ..  .-..  .-..   -.-  .  .  .--.   -  .-.  -.--  ..  -.  --.  .-.-.-
  
  */
  
</body>

</html>
